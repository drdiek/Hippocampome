This is a multi-part message in MIME format.
--------------010308030605060408000309
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

Dear Diek:
         Here are some sub functions that main function may need.

Best,

Wei

--------------010308030605060408000309
Content-Type: text/plain;
 name="Check_MPI_Cluster.m"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="Check_MPI_Cluster.m"

function [Nr_CPUs,Nr_Nodes,CPU_per_node]            = Check_MPI_Cluster;

[t,w]       = unix('lamnodes');
IDX         = find(w==':');
Nr_Nodes    = length(IDX);
for IDX_Node=1:Nr_Nodes
    cpu(IDX_Node) = str2num(w(IDX(IDX_Node)+1));
end
cpu(1) = cpu(1)-1; % First CPU of the Master node is the Mast Programm and does not do any compuatition 
Nr_CPUs =sum(cpu);
CPU_per_node =cpu;
--------------010308030605060408000309
Content-Type: text/plain;
 name="make_execution_control_file.m"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="make_execution_control_file.m"

function [Parameterfile,file_name_PMatlabGP_Controll ] = make_execution_control_file(Compuations_to_do,File_to_execute,Parameterfile_ID,Nice_level)

if nargin==3
    Nice_level=15;
    disp('Nice level is by default 15')
else
    Nice_level =abs(Nice_level);
    if Nice_level>20
       Nice_level=20;
       disp('Nice level has to be bonded by 0 and 20 : 0 = high priority / 20 = low priority');
   end
end
    

Parameterfile                   = ['Parameterfile_for__' File_to_execute '__' Parameterfile_ID];
file_name_PMatlabGP_Controll    = ['execution_control_file__' File_to_execute '__' Parameterfile_ID '.ecf'];
fid                             = fopen(file_name_PMatlabGP_Controll,'w');
fprintf(fid, '------------------------------------------------------------------------------------ \n');
fprintf(fid,['Header of execution_control_file for Executable ' File_to_execute ' and Parameter file ' Parameterfile ' \n']);
fprintf(fid, 'Definition of Computations to be executed is started and closes by 20 times # \n');
fprintf(fid, 'Header has to be ignored \n');
fprintf(fid, 'Definition is structured such \n');
fprintf(fid, '1) Name of file which has to be called - Name can be different for different Process IDs - Function which is called has two arguments (Name_of_parameterfile,ProcessID) \n');
fprintf(fid, '2) Name of the parameter file which is read be the executed file defined in 1) This value has to be used as a function argument of function defined in 1) \n');
fprintf(fid, '3) Process ID - defines the compuation by using detailed info contained in the parameter file - The Process ID has to be used as a function argument of function defined in 1)  \n');
fprintf(fid, '------------------------------------------------------------------------------------ \n');
fprintf(fid, ['This file is automatically generated ' date '                  \n']);
fprintf(fid, ['For further Information contact Gordon Pipa by mail@g-pipa.de or Nan-Hui Chen by nchen@mpih-frankfurt.mpg.de \n']);
fprintf(fid, '------------------------------------------------------------------------------------ \n');
fprintf(fid, '[Nice Level] \n');
fprintf(fid, [num2str(Nice_level) ' \n']);
fprintf(fid, 'Computations to be executed: \n');
fprintf(fid, '#################### \n');
for IDX_Comp=1:length(Compuations_to_do)
    fprintf(fid, [File_to_execute ' ' Parameterfile '.mat ' num2str(Compuations_to_do(IDX_Comp)) ' \n'] );
end
fprintf(fid, '#################### \n');
fprintf(fid,['Nr Calls in total : ' num2str(length(Compuations_to_do)) '  \n']);
fclose(fid);


--------------010308030605060408000309
Content-Type: text/plain;
 name="make_MPIRUN_scriptfile.m"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="make_MPIRUN_scriptfile.m"

function [used_CPUs, scriptfilename] =make_MPIRUN_scriptfile(File_to_execute,Parameterfile_ID,Nr_CPUs,wished_number)

%dbstop in make_MPIRUN_scriptfile at 25
Priority_CPU =[];
if exist('Cluster_Definition_File_Cluster_Queues.mat')==2
    load('Cluster_Definition_File_Cluster_Queues')
    NR_Nodes    =size(struct_CPU_Node,2);
    for IDXNode=1:NR_Nodes
        CPUs(IDXNode)            =struct_CPU_Node{IDXNode}.NrCPU;
        Priority(IDXNode)        =struct_CPU_Node{IDXNode}.Priotity;
        Priority_CPU             =[Priority_CPU ones(CPUs(IDXNode),1)'.*Priority(IDXNode)];
    end
    if length(Priority_CPU )~= Nr_CPUs
        disp('The information in the File "Cluster_Definition_File_Cluster_Queues.mat" is not consitent with the MPI running enviroment')
        disp('Thus Priorities of certain CPU can not be considered')
        Priority_CPU = ones(1,Nr_CPUs);
    end
else
    disp('The File "Cluster_Definition_File_Cluster_Queues.mat" is not found')
    disp('Thus Priorities of certain CPU can not be considered')
    Priority_CPU = ones(1,Nr_CPUs);
end
consider_CPU        = ones(size(Priority_CPU));

if or(wished_number==Nr_CPUs,wished_number ==-1)
    wished_number=Nr_CPUs;
    disp(['All requested/available ' num2str(wished_number) ' CPU are included in the Clsuter'])
else
    if wished_number<Nr_CPUs
        disp(['You requested ('  num2str(wished_number) ') less CPUs than do exsit ('  num2str(Nr_CPUs) ')- Your requested number is included in the Cluster'])
        IDX_P1      = find(Priority_CPU==1);
        Diff_Nr_CPU = Nr_CPUs-wished_number;
        IDX_E       = length(IDX_P1);
        IDX_S       = max([1 IDX_E-Diff_Nr_CPU+1]);
        consider_CPU(IDX_P1(IDX_S:IDX_E))=0;
        act_NrCPUs  = sum(consider_CPU);
        IDX_P2      = find(Priority_CPU==2);
        Diff_Nr_CPU = act_NrCPUs-wished_number;
        if Diff_Nr_CPU>0
            IDX_E       = length(IDX_P2);
            IDX_S       = max([1 IDX_E-Diff_Nr_CPU+1]);   
            consider_CPU(IDX_P2(IDX_S:IDX_E))=0;
        end
      
    else 
        disp(['You requested ('  num2str(wished_number) ') more CPUs than do exsit ('  num2str(Nr_CPUs) ')- All existing CPUs are included in the Cluster'])
        wished_number=Nr_CPUs;
    end
end
used_CPUs   =sum(consider_CPU);

file_name_PMatlabGP_Controll    = ['execution_control_file__' File_to_execute '__' Parameterfile_ID '.ecf'];
sting_script1                   = ['c0 pcalc ' file_name_PMatlabGP_Controll ];
scriptfilename                  = ['MPIRUN_scriptfile_for__' File_to_execute '__' Parameterfile_ID '.txt'];
fid                             = fopen(scriptfilename,'w');
fprintf(fid,[sting_script1 ' \n']);
for IDX_CPU=1:length(consider_CPU)
    if consider_CPU(IDX_CPU)==1
        sting_script2                   = ['c' num2str(IDX_CPU) ' pcalc'];
        fprintf(fid,[sting_script2 ' \n']);
    end
end                  
fclose(fid);

--------------010308030605060408000309
Content-Type: text/plain;
 name="Compile_matlab_code_genEXE.m"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="Compile_matlab_code_genEXE.m"

function Compile_matlab_code_genEXE(Calc_function_name_m)

mkdir('C_files')
!cp *.c ./C_files
old_2dir=pwd;
Calc_function_name   =[Calc_function_name_m '_EXE'];
eval(['mcc -m -O all ' Calc_function_name_m '.m']);
eval(['!mv ' Calc_function_name_m ' ' Calc_function_name ]);
!rm *.c
!rm *.h
!cp ./C_files/* ./
cd(old_2dir);

--------------010308030605060408000309
Content-Type: text/plain;
 name="make_parameterfile.m"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="make_parameterfile.m"


--------------010308030605060408000309--

