function export_to_excel(nColors, nNonWhitePixels, subregions, base, layer, neurite, isRemoveColor)

    fileName = '~/Dropbox/MATLAB/dir_QuantifyNeurites/output/output.xlsx';
    
    for i = 1:length(nNonWhitePixels)
    
        % Calibrate PlotDigitizer against calibration bar
        minPixels = 100;
        maxPixels = 400;
        scalePixelsEqn = sprintf('=B%d-A%d', i, i);
        scaleMicrons = 100;
        micronsPerPixelEqn = sprintf('=D%d/C%d', i, i);
        micronsSquaredPerPixelEqn = sprintf('=E5d*E%d', i, i);
        
        % MATLAB
        nNonWhitePixelsErrorEqn = sprintf('=SQRT(B%d)', i);
        
        % Calculate lengths of neurites based on area pixel counts
        areaMicronsSquaredEqn = sprintf('=F%d*H%d', i, i);
        areaMicronsSquaredErrorEqn = sprintf('=F%d*I%d', i, i);
        lineWidthPixels = 2;
        lineWidthPixelsError = 1;
        lineWidthMicronsEqn = sprintf('=L%d*E%d', i, i);
        lineWidthMicronsErrorEqn = sprintf('=M%d*E%d', i, i);
        lengthMicronsEqn = sprintf('=J%d/N%d', i, i);
        lengthMicronsErrorEqn = sprintf('=P%d*SQRT((K%d/J%d)^2+(O%d/N%d)^2)', i, i, i, i, i);
        
        % Apply correction factors
        pixelCountingCorrectedLengthMicronsEqn = sprintf('=P%d*$Q$253', i);
        pixelCountingCorrectedLengthMicronsErrorEqn = sprintf('=Q%d*$Q$253', i);
        slicingCorrectedLengthMicronsEqn = sprintf('=R%d*100/(100-$T$253)', i);
        slicingCorrectedLengthMicronsErrorEqn = sprintf('=S%d*100/(100-$T$253)', i);
        
        % % neurite by layer
        percentOfAllPartsOfNeuriteTree = 0;
        percentOfAllPartsOfNeuriteTreeError = '';
        
        % Description of neurites being analyzed
        neuriteDescription = sprintf('%s:%s:%s', neurite, subregions(i), layer);
        sliceThicknessMicrons = 300;
        notes = sprintf('%s, included color map lines', base);
        idx = find(isRemoveColor == 0);
        nMarkedColors = length(idx);
        for j = 1:nMarkedColors
            notes = sprintf('%s %d', notes, isRemoveColor(idx(j)));
            if (j < nMarkedColors)
                notes = sprintf('%s,', notes);
            end
        end % j
        figureFile = sprintf('%s_%s_%dcolors_%ss_%dcolors.png', base, layer, nColors, neurite, nMarkedColors);
        
        A(i,:) = {minPixels, ...
                  maxPixels, ...
                  scalePixelsEqn, ...
                  scaleMicrons, ...
                  micronsPerPixelEqn, ...
                  micronsSquaredPerPixelEqn, ...
                  nColors, ...
                  nNonWhitePixels(i), ...
                  nNonWhitePixelsErrorEqn, ...
                  areaMicronsSquaredEqn, ...
                  areaMicronsSquaredErrorEqn, ...
                  lineWidthPixels, ...
                  lineWidthPixelsError, ...
                  lineWidthMicronsEqn, ...
                  lineWidthMicronsErrorEqn, ...
                  lengthMicronsEqn, ...
                  lengthMicronsErrorEqn, ...
                  pixelCountingCorrectedLengthMicronsEqn, ...
                  pixelCountingCorrectedLengthMicronsErrorEqn, ...
                  slicingCorrectedLengthMicronsEqn, ...
                  slicingCorrectedLengthMicronsErrorEqn, ...
                  percentOfAllPartsOfNeuriteTree, ...
                  percentOfAllPartsOfNeuriteTreeError, ...
                  neuriteDescription, ...
                  sliceThicknessMicrons, ...
                  notes, ...
                  figureFile};
    
    end % i
        
    xlswrite(fileName, A);

end % export_to_excel()